<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Thymeleaf实现热部署</title>
      <link href="/2020/10/21/thymeleaf-shi-xian-re-bu-shu/"/>
      <url>/2020/10/21/thymeleaf-shi-xian-re-bu-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不用每次都重启服务器就能看见Thymeleaf模块的改动</p></blockquote><h3 id="1-方法一：通过添加spring-boot-devtools依赖实现热部署"><a href="#1-方法一：通过添加spring-boot-devtools依赖实现热部署" class="headerlink" title="1.方法一：通过添加spring-boot-devtools依赖实现热部署"></a>1.方法一：通过添加spring-boot-devtools依赖实现热部署</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="2-方法二：通过修改IEDA配置实现热部署"><a href="#2-方法二：通过修改IEDA配置实现热部署" class="headerlink" title="2.方法二：通过修改IEDA配置实现热部署"></a>2.方法二：通过修改IEDA配置实现热部署</h3><h4 id="2-1-修改配置"><a href="#2-1-修改配置" class="headerlink" title="2.1 修改配置"></a>2.1 修改配置</h4><p>1.File | Settings | Build, Execution, Deployment | Compiler</p><p>2.将Build project automatically 勾上</p><h4 id="2-2-修改registry"><a href="#2-2-修改registry" class="headerlink" title="2.2 修改registry"></a>2.2 修改registry</h4><ol><li>按住Ctrl+Shift+Alt+/</li><li>点击registry</li><li>将compiler.automake.allow.when.app.running勾上</li></ol><h4 id="2-3-配置application-properties"><a href="#2-3-配置application-properties" class="headerlink" title="2.3 配置application.properties"></a>2.3 配置application.properties</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><h3 id="3-设置完成后"><a href="#3-设置完成后" class="headerlink" title="3.设置完成后"></a>3.设置完成后</h3><p>启动服务器，在改动后的Thymeleaf模块界面按下 Ctrl+Shift+F9</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC应用表单验证</title>
      <link href="/2020/10/16/springmvc-biao-dan-yan-zheng/"/>
      <url>/2020/10/16/springmvc-biao-dan-yan-zheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring+Thymeleaf校验表单输入</p></blockquote><h3 id="1-添加validation-api、hibernate-validator依赖到项目中"><a href="#1-添加validation-api、hibernate-validator依赖到项目中" class="headerlink" title="1.添加validation-api、hibernate-validator依赖到项目中"></a>1.添加validation-api、hibernate-validator依赖到项目中</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="2-给实体类添加注解"><a href="#2-给实体类添加注解" class="headerlink" title="2.给实体类添加注解"></a>2.给实体类添加注解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Taco</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Name must be at least 5 characters long"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"You must choose at least 1 ingredient"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> ingredients<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Name is required"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Street is required"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String street<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"City is required"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"State is required"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String state<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"Zip code is required"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String zip<span class="token punctuation">;</span>    <span class="token annotation punctuation">@CreditCardNumber</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Not a valid credit card number"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ccNumber<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"^(0[1-9]|1[0-2])([\\/])([1-9][0-9])$"</span><span class="token punctuation">,</span>             message<span class="token operator">=</span><span class="token string">"Must be formatted MM/YY"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ccExpiration<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Digits</span><span class="token punctuation">(</span>integer <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> fraction <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Invalid CVV"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ccCVV<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-在Controller执行时进行校验"><a href="#3-在Controller执行时进行校验" class="headerlink" title="3.在Controller执行时进行校验"></a>3.在Controller执行时进行校验</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/design"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesignTacoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> String <span class="token function">processDesign</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"design"</span><span class="token punctuation">)</span> Taco design<span class="token punctuation">,</span> Errors errors<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"design"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Processing design: "</span> <span class="token operator">+</span> design<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/orders/current"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orders"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> String <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> Order order<span class="token punctuation">,</span> Errors errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"orderForm"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Order submitted: "</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-在视图展示校验错误"><a href="#4-在视图展示校验错误" class="headerlink" title="4.在视图展示校验错误"></a>4.在视图展示校验错误</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${design}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validationError<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#fields.hasErrors(<span class="token punctuation">'</span>ingredients<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{ingredients}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Ingredient Error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #fields.hasErrors(...) 函数接受一个表达式参数(ingredients),返回一个布尔值告诉field该字段是否有验证错误 --></span><span class="token comment" spellcheck="true">&lt;!-- th:errors获取返回信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#fields.hasErrors(<span class="token punctuation">'</span>name<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>XXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validationError<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#fields.hasErrors(<span class="token punctuation">'</span>name<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name Error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/orders}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${order}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validationError<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#fields.hasErrors(<span class="token punctuation">'</span>name<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name Error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Git推送本地代码到GitHub仓库</title>
      <link href="/2020/07/29/git-tui-song-dai-ma-dao-github/"/>
      <url>/2020/07/29/git-tui-song-dai-ma-dao-github/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过Git推送本地代码到GitHub仓库</p></blockquote><h3 id="1-前提"><a href="#1-前提" class="headerlink" title="1. 前提"></a>1. 前提</h3><h4 id="1-1-安装Git"><a href="#1-1-安装Git" class="headerlink" title="1.1 安装Git"></a>1.1 安装Git</h4><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a></p><!-- #### 1.1.1 设置你的名字和Email地址安装完成后，点击"Git Bash"```$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"```查看配置信息```$ git config --global  --list```#### 1.1.2 设置SSH key由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要设置SSH key。##### 1.1.3 创建SSH key```$ ssh-keygen -t rsa -C "youremail@example.com"```##### 1.1.4 为Github设置SSH key --><h4 id="1-2-创建Github仓库"><a href="#1-2-创建Github仓库" class="headerlink" title="1.2 创建Github仓库"></a>1.2 创建Github仓库</h4><p><a href="https://github.com/" target="_blank" rel="noopener">Github</a></p><h4 id="1-3-创建本地仓库"><a href="#1-3-创建本地仓库" class="headerlink" title="1.3 创建本地仓库"></a>1.3 创建本地仓库</h4><h5 id="1-3-1-指定路径"><a href="#1-3-1-指定路径" class="headerlink" title="1.3.1 指定路径"></a>1.3.1 指定路径</h5><p>进入pwd文件夹</p><pre><code>cd pwd</code></pre><h5 id="1-3-2-初始化仓库"><a href="#1-3-2-初始化仓库" class="headerlink" title="1.3.2 初始化仓库"></a>1.3.2 初始化仓库</h5><p>把这个目录变成Git可以管理的仓库</p><pre><code>$ git init</code></pre><h3 id="2-Git推送代码到Github仓库"><a href="#2-Git推送代码到Github仓库" class="headerlink" title="2. Git推送代码到Github仓库"></a>2. Git推送代码到Github仓库</h3><h4 id="2-1-把文件添加到仓库"><a href="#2-1-把文件添加到仓库" class="headerlink" title="2.1 把文件添加到仓库"></a>2.1 把文件添加到仓库</h4><pre><code>$ git add .</code></pre><h4 id="2-2-把文件提交到仓库"><a href="#2-2-把文件提交到仓库" class="headerlink" title="2.2 把文件提交到仓库"></a>2.2 把文件提交到仓库</h4><pre><code>$ git commit -m "提交说明"</code></pre><h4 id="2-3-推送到Github远程库"><a href="#2-3-推送到Github远程库" class="headerlink" title="2.3 推送到Github远程库"></a>2.3 推送到Github远程库</h4><h5 id="2-3-1-关联远程仓库"><a href="#2-3-1-关联远程仓库" class="headerlink" title="2.3.1 关联远程仓库"></a>2.3.1 关联远程仓库</h5><pre><code>$ git remote add origin git@github.com:zhiwe/test.git</code></pre><h5 id="2-3-2-推送到远程库"><a href="#2-3-2-推送到远程库" class="headerlink" title="2.3.2 推送到远程库"></a>2.3.2 推送到远程库</h5><p>第一次推送master分支所有内容</p><pre><code>$ git push -u origin master</code></pre><p>之后提交推送最新修改</p><pre><code>$ git push origin master</code></pre><h3 id="3-删除Github仓库文件"><a href="#3-删除Github仓库文件" class="headerlink" title="3. 删除Github仓库文件"></a>3. 删除Github仓库文件</h3><ol><li>删除filename文件</li></ol><pre><code>git rm --cached filename</code></pre><ol start="2"><li>提交操作</li></ol><pre><code>git commit -m "操作说明"</code></pre><ol start="3"><li>推送到远程</li></ol><pre><code>git push origin</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git的使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/2020/07/10/java-bi-ji/"/>
      <url>/2020/07/10/java-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于java的一些笔记</p></blockquote><h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h4><ul><li>整数类型(byte、short、int、long)</li><li>浮点类型(float、double)</li><li>布尔类型(boolean)</li><li>字符类型(char)</li></ul><table><thead><tr><th>类型</th><th>类型名称</th><th>占用内存</th><th>取值范围</th><th>默认值</th></tr></thead><tbody><tr><td>整型</td><td>byte</td><td>1字节</td><td>-128（-2^7）~127（2^7-1）</td><td>0</td></tr><tr><td></td><td>short</td><td>2字节</td><td>-32768（-2^15）~32767（2^15 - 1）</td><td>0</td></tr><tr><td></td><td>int</td><td>4字节</td><td>-2,147,483,648（-2^31）~2,147,483,647（2^31 - 1）</td><td>0</td></tr><tr><td></td><td>long</td><td>8字节</td><td>-9,223,372,036,854,775,808（-2^63）~9,223,372,036,854,775,807（2^63 -1）</td><td>0L</td></tr><tr><td>浮点型</td><td>float</td><td>4字节</td><td>-3.403E38~3.403E38</td><td>0.0f</td></tr><tr><td></td><td>double</td><td>8字节</td><td>-1.798E308~1.798E308</td><td>0.0d</td></tr><tr><td>布尔型</td><td>boolean</td><td>1字节</td><td>true或false</td><td>false</td></tr><tr><td>字符型</td><td>char</td><td>2字节</td><td>表示一个字符</td><td>‘\u0000’</td></tr></tbody></table><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><ul><li>类(class)</li><li>接口(interface)</li><li>数组([])</li></ul><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><ul><li>也称为静态变量，独立于方法之外的变量，用static修饰</li><li>存储在静态存储区，在第一次被访问时创建，程序结束时销毁</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态私有变量salary</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量DEPARTMENT</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEPARTMENT <span class="token operator">=</span> <span class="token string">"开发人员"</span><span class="token punctuation">;</span></code></pre><h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><ul><li>独立于方法之外的变量，没有static修饰</li><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个实例变量对子类可见</span><span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//私有变量，仅在该类可见</span><span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span></code></pre><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ul><li>类的方法中的变量，声明在方法、构造方法或者语句块中</li><li>被执行的时候创建，执行完后会被销毁</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pupAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      age <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗的年龄是: "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li>用来定义类、方法或者变量，通常放在语句的最前端。</li></ul><h4 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h4><ul><li>default:在同一个包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li>private:在同一个类内可见。使用对象：变量、方法。不能修饰类。</li><li>public:对所有类可见。使用对象：类、接口、变量、方法。</li><li>protected:对同一包内的类和所有子类可见。使用对象：变量、方法。不能修饰类。</li></ul><h4 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h4><ul><li>static:用来声明独立于对象的类方法和类变量，对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。</li><li>final:修饰的类不能被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li><li>abstract:用来创建抽象类和抽象方法。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抽象方法</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现抽象方法</span>    <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>synchronized:用于线程的编程，声明的方法同一时间只能被一个线程访问，可以应用于四个访问修饰符。</li><li>transient:序列化对象包含被transient修饰的实例变量时，java虚拟机跳过该特定的变量</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不会持久化</span><span class="token keyword">public</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//持久化</span></code></pre><ul><li>volatile:在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><ul><li>+、-、*、/、%、++、–</li></ul><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><ul><li>==、！=、&gt;、&lt;、&gt;=、&lt;=</li></ul><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ul><li>&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</li></ul><pre><code>A = 0011 1100B = 0000 1101A &amp; B = 0000 1100A | B = 0011 1101A ^ B = 0011 0001~A = 1100 0011A &lt;&lt; 2 = 1111 0000A &gt;&gt; 2 = 0000 1111A &gt;&gt;&gt; 2 = 0000 1111 </code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>&amp;&amp;、||、！</li><li>短位逻辑运算符</li><li>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false，这时候就不会再判断第二个操作了。</li></ul><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul><li>=、+=、-=、*=、/=、%=、&lt;&lt;=、&gt;&gt;=、&amp;=、^=、|=</li></ul><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><ul><li>也称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</li><li>variable x = (expression) ? value if true : value if false</li></ul><h4 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h4><ul><li>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</li><li>( Object reference variable ) instanceof ( class/interface type )</li></ul><pre class=" language-java"><code class="language-java">String name <span class="token operator">=</span> <span class="token string">"James"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> name <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//由于name是String类型，所以返回真</span></code></pre><h3 id="Number-amp-Math-类"><a href="#Number-amp-Math-类" class="headerlink" title="Number &amp; Math 类"></a>Number &amp; Math 类</h3><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><ul><li>Boolean、Byte、Short、Integer、Long、Character、Float、Double</li><li>装箱：自动将基本数据类型转换为包装器类型</li><li>拆箱：自动将包装器类型转换为基本数据类型</li><li>Character 方法<ul><li>isLetter()：是否是一个字母</li><li>isDigit()：是否是一个数字字符</li><li>isWhitespace()：是否是一个空白字符</li><li>isUpperCase()：是否是大写字母</li><li>isLowerCase()：是否是小写字母</li><li>toUpperCase()：指定字母的大写形式</li><li>toLowerCase()：指定字母的小写形式</li><li>toString()：返回字符的字符串形式，字符串的长度仅为1</li></ul></li></ul><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><ul><li>包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</li></ul><h4 id="Number-amp-Math-类方法"><a href="#Number-amp-Math-类方法" class="headerlink" title="Number &amp; Math 类方法"></a>Number &amp; Math 类方法</h4><ul><li>xxxValue():将 Number 对象转换为xxx数据类型的值并返回。</li></ul><pre class=" language-java"><code class="language-java">Integer x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>compareTo():将Number对象与参数比较。</p><ul><li><p>public int compareTo( NumberSubClass referenceName )</p></li><li><p>如果指定的数与参数相等返回0,小于返回 -1,大于返回 1。</p><pre class=" language-java"><code class="language-java">Integer x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回-1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回0</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回1</span></code></pre></li></ul></li><li><p>equals():判断number对象是否与参数相等。</p></li><li><p>valueOf():返回一个 Number 对象指定的内置数据类型</p></li></ul><pre class=" language-java"><code class="language-java">Integer x <span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Double c <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Float a <span class="token operator">=</span> Float<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"80"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>toString():以字符串形式返回值。</li><li>parseInt():将字符串解析为int类型。</li><li>abs():返回参数的绝对值。</li><li>ceil():返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。</li><li>floor():返回小于等于（&lt;=）给定参数的最大整数 。</li><li>rint():返回与参数最接近的整数。返回类型为double。</li><li>round():它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。</li><li>min():返回两个参数中的最小值。</li><li>max():返回两个参数中的最大值。</li><li>exp():返回自然数底数e的参数次方。</li><li>log():返回参数的自然数底数的对数值。</li><li>pow():返回第一个参数的第二个参数次方。</li><li>sqrt():求参数的算术平方根。</li><li>sin()、cos()、tan()、asin()、acos()、atan()：求指定double类型参数的正弦值、余弦值、正切值、反正弦值、反余弦值、反正切值。</li><li>atan2()：将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。</li><li>toDegrees()：将参数转化为角度。</li><li>toRadians()：将角度转换为弧度。</li><li>random()：返回一个随机数。</li></ul><h3 id="String-amp-StringBuffer-amp-StringBuilder类"><a href="#String-amp-StringBuffer-amp-StringBuilder类" class="headerlink" title="String &amp; StringBuffer &amp; StringBuilder类"></a>String &amp; StringBuffer &amp; StringBuilder类</h3><h4 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h4><h5 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h5><pre class=" language-java"><code class="language-java">String greeting <span class="token operator">=</span> <span class="token string">"字符串"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> helloArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>String helloString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>helloArray<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> helloString <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//abcde</span></code></pre><h5 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h5><ul><li>length():返回字符串对象包含的字符数</li></ul><pre class=" language-java"><code class="language-java">String greeting <span class="token operator">=</span> <span class="token string">"字符串"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> greeting<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3</span></code></pre><h5 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h5><ul><li>concat():连接两个字符串</li><li>string1.concat(string2);</li></ul><h5 id="创建格式化字符串"><a href="#创建格式化字符串" class="headerlink" title="创建格式化字符串"></a>创建格式化字符串</h5><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"浮点型变量的值为 %f, 整型变量的值为 %d, 字符串变量的值为 %s"</span><span class="token punctuation">,</span> floatVar<span class="token punctuation">,</span> intVar<span class="token punctuation">,</span> stringVar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">String fs<span class="token punctuation">;</span>fs <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"浮点型变量的值为 %f, 整型变量的值为 %d, 字符串变量的值为 %s"</span><span class="token punctuation">,</span> floatVar<span class="token punctuation">,</span> intVar<span class="token punctuation">,</span> stringVar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h5><ul><li><p>charAt():返回指定索引处的 char 值。索引范围为从 0 到 length() - 1。</p><ul><li>public char charAt(int index)</li></ul></li><li><p>compareTo():把这个字符串和另一个对象比较。</p></li><li><p>concat():将指定字符串连接到此字符串的结尾。</p></li><li><p>copyValueOf():返回指定数组中表示该字符序列的 String。</p></li><li><p>endsWith():测试此字符串是否以指定的后缀结束。</p></li><li><p>equals():将此字符串与指定的对象比较。</p></li><li><p>getChars():将字符从此字符串复制到目标字符数组。</p></li><li><p>hashCode():返回此字符串的哈希码。</p></li><li><p>indexOf():返回指定字符在此字符串中第一次出现处的索引。</p></li><li><p>lastIndexOf():返回指定字符在此字符串中最后一次出现处的索引。</p></li><li><p>length():返回此字符串的长度。</p></li><li><p>replace():返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</p></li><li><p>split():根据给定正则表达式的匹配拆分此字符串。</p></li><li><p>startsWith():测试此字符串是否以指定的前缀开始。</p></li><li><p>subString():返回一个新的字符串，它是此字符串的一个子字符串。</p></li><li><p>toCharArray():将此字符串转换为一个新的字符数组。</p></li><li><p>toLowerCase():使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</p></li><li><p>toString(): 返回此对象本身。</p></li><li><p>toUpperCase():使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</p></li><li><p>trim()：返回字符串的副本，忽略前导空白和尾部空白。</p></li></ul><h4 id="StringBuffer-和-StringBuilder-类"><a href="#StringBuffer-和-StringBuilder-类" class="headerlink" title="StringBuffer 和 StringBuilder 类"></a>StringBuffer 和 StringBuilder 类</h4><ul><li>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</li><li>StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</li><li>StringBuilder 的方法不是线程安全的（不能同步访问），在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</li></ul><h5 id="StringBuffer-方法"><a href="#StringBuffer-方法" class="headerlink" title="StringBuffer 方法"></a>StringBuffer 方法</h5><ul><li><p>public StringBuffer append(String s)：将指定的字符串追加到此字符序列。</p></li><li><p>public StringBuffer reverse()： 将此字符序列用其反转形式取代。</p></li><li><p>public delete(int start, int end)：移除此序列的子字符串中的字符。</p></li><li><p>public insert(int offset, int i)：将 int 参数的字符串表示形式插入此序列中。</p></li><li><p>replace(int start, int end, String str)：使用给定 String 中的字符替换此序列的子字符串中的字符。</p></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h4><ul><li><p>dataType[] arrayRefVar;</p></li><li><p>dataType arrayRefVar[]; </p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myList<span class="token punctuation">;</span><span class="token keyword">double</span> myList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><ul><li>arrayRefVar = new dataType[arraySize];</li><li>数组变量的声明，和创建数组可以用一条语句完成:<ul><li>dataType[] arrayRefVar = new dataType[arraySize];</li><li>dataType[] arrayRefVar = {value0, value1, …, valuek};</li></ul></li></ul><h4 id="For-Each-循环"><a href="#For-Each-循环" class="headerlink" title="For-Each 循环"></a>For-Each 循环</h4><pre><code>for(type element: array){    System.out.println(element);}</code></pre><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><h5 id="多维数组的动态初始化（以二维数组为例）"><a href="#多维数组的动态初始化（以二维数组为例）" class="headerlink" title="多维数组的动态初始化（以二维数组为例）"></a>多维数组的动态初始化（以二维数组为例）</h5><ul><li>type[][] typeName = new type[typeLength1][typeLength2];</li></ul><h5 id="多维数组的引用（以二维数组为例）"><a href="#多维数组的引用（以二维数组为例）" class="headerlink" title="多维数组的引用（以二维数组为例）"></a>多维数组的引用（以二维数组为例）</h5><ul><li>arrayName[index1][index2]</li></ul><h4 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h4><ul><li>public static int binarySearch(Object[] a, Object key)<ul><li>用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。</li></ul></li><li>public static boolean equals(long[] a, long[] a2)<ul><li>如果两个指定的 long 型数组彼此相等，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</li></ul></li><li>public static void fill(int[] a, int val)<ul><li>将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）</li></ul></li><li>public static void sort(Object[] a)<ul><li>对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</li></ul></li></ul><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><h4 id="Date-类的两个构造函数"><a href="#Date-类的两个构造函数" class="headerlink" title="Date 类的两个构造函数"></a>Date 类的两个构造函数</h4><ul><li>Date( )</li><li>Date(long millisec)</li></ul><h4 id="Date-类方法"><a href="#Date-类方法" class="headerlink" title="Date 类方法"></a>Date 类方法</h4><ul><li>boolean after(Date date)<ul><li>若当调用此方法的Date对象在指定日期之后返回true,否则返回false。</li></ul></li><li>boolean before(Date date)<ul><li>若当调用此方法的Date对象在指定日期之前返回true,否则返回false。</li></ul></li><li>Object clone( )<ul><li>返回此对象的副本。</li></ul></li><li>int compareTo(Date date)<ul><li>比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</li></ul></li><li>boolean equals(Object date)<ul><li>当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。</li></ul></li><li>long getTime( )<ul><li>返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li></ul></li><li>int hashCode( )<ul><li>返回此对象的哈希码值。</li></ul></li><li>void setTime(long time)<ul><li>用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。</li></ul></li><li>String toString( )<ul><li>把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</li></ul></li></ul><h4 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 初始化 Date 对象</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 toString() 函数显示日期时间</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="使用-SimpleDateFormat-格式化日期"><a href="#使用-SimpleDateFormat-格式化日期" class="headerlink" title="使用 SimpleDateFormat 格式化日期"></a>使用 SimpleDateFormat 格式化日期</h4><ul><li>SimpleDateFormat ft = new SimpleDateFormat (“yyyy-MM-dd hh:mm:ss”);</li></ul><pre class=" language-java"><code class="language-java">Date dNow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>SimpleDateFormat ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span> <span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间为: "</span> <span class="token operator">+</span> ft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dNow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="休眠sleep"><a href="#休眠sleep" class="headerlink" title="休眠sleep"></a>休眠sleep</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 休眠3秒</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Got an exception!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span></code></pre><h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><h5 id="创建一个代表系统当前日期的Calendar对象"><a href="#创建一个代表系统当前日期的Calendar对象" class="headerlink" title="创建一个代表系统当前日期的Calendar对象"></a>创建一个代表系统当前日期的Calendar对象</h5><ul><li>Calendar c = Calendar.getInstance();//默认是当前日期</li></ul><h5 id="创建一个指定日期的Calendar对象"><a href="#创建一个指定日期的Calendar对象" class="headerlink" title="创建一个指定日期的Calendar对象"></a>创建一个指定日期的Calendar对象</h5><ul><li>public final void set(int year,int month,int date)</li></ul><h5 id="Add设置"><a href="#Add设置" class="headerlink" title="Add设置"></a>Add设置</h5><pre class=" language-java"><code class="language-java">Calendar c1 <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把c1对象的日期加上10</span>c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把c1对象的日期减去10</span></code></pre><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h4><ul><li>public String getMessage()<ul><li>返回关于发生的异常的详细信息。</li></ul></li><li>public Throwable getCause()<ul><li>返回一个Throwable 对象代表异常原因。</li></ul></li><li>public String toString()<ul><li>使用getMessage()的结果返回类的串级名字。</li></ul></li><li>public void printStackTrace()<ul><li>打印toString()结果和栈层次到System.err，即错误输出流。</li></ul></li><li>public StackTraceElement [] getStackTrace()<ul><li>返回一个包含堆栈层次的数组。</li></ul></li><li>public Throwable fillInStackTrace()<ul><li>用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</li></ul></li></ul><h4 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h4><ul><li>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//程序代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ExceptionName e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Catch 块</span><span class="token punctuation">}</span></code></pre><h4 id="多重捕获块"><a href="#多重捕获块" class="headerlink" title="多重捕获块"></a>多重捕获块</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 程序代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常的变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 程序代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常的变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 程序代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常的变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 程序代码</span><span class="token punctuation">}</span></code></pre><h4 id="throws-throw-关键字："><a href="#throws-throw-关键字：" class="headerlink" title="throws/throw 关键字："></a>throws/throw 关键字：</h4><ul><li>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。</li></ul><h4 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h4><ul><li>finally 关键字用来创建在 try 代码块后面执行的代码块。</li><li>无论是否发生异常，finally 代码块中的代码总会被执行。</li></ul><h4 id="声明自定义异常"><a href="#声明自定义异常" class="headerlink" title="声明自定义异常"></a>声明自定义异常</h4><ul><li>所有异常都必须是 Throwable 的子类。</li><li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li><li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/08/hello-world/"/>
      <url>/2020/07/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="新建草稿"><a href="#新建草稿" class="headerlink" title="新建草稿"></a>新建草稿</h3><pre><code>$ hexo new draft newdraft</code></pre><h3 id="草稿预览"><a href="#草稿预览" class="headerlink" title="草稿预览"></a>草稿预览</h3><pre><code>$ hexo server --draft</code></pre><h3 id="草稿发表到post"><a href="#草稿发表到post" class="headerlink" title="草稿发表到post"></a>草稿发表到post</h3><pre><code>$ hexo publish draft newdraft</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
